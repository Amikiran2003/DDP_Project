testCapAves <- predict(preObj, testing[,-58])$capitalAve
mean(testCapAves)
sd(testCapAves)
preObj <- preProcess(training[,-58], method = c("BoxCox"))
trainCapAves <- predict(preObj, training[,-58])$capitalAve
par(mfrow=c(1,2))
hist(trainCapAves)
qnorm(trainCapAves)
qqnorm(trainCapAves)
training$capAve <- training$CapitalAve
selectNA <- rbinom(dim(training)[1],size =1, prob = 0.05)==1
training$capAve[selectNA] <- NA
preObj <- preProcess(training[,-58], method = c("knnImpute"))
capAve <- predict(preObj, training[,-58])$capAve
capAve <- predict(preObj, training[,-58])$capAve
preObj <- preProcess(training[,-58], method = c("knnImpute"))
capAve <- predict(preObj, training[,-58])$capAve
preObj <- preProcess(training[,-58], method = "knnImpute")
capAve <- predict(preObj, training[,-58])$capAve
install.packages("RANN")
capAve <- predict(preObj, training[,-58])$capAve
preObj <- preProcess(training[,-58], method = "knnImpute")
capAve <- predict(preObj, training[,-58])$capAve
library("RANN", lib.loc="~/R/win-library/3.2")
preObj <- preProcess(training[,-58], method = "knnImpute")
capAve <- predict(preObj, training[,-58])$capAve
library(ISLR)
library(caret)
data(wage)
data(Wage)
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
inTrain <- createDataPartition(y = Wage$wage, p = 0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
table(training$jobclass)
dummies <- dummyVar(wage ~ jobclass, data= training)
head(predict(dummies, newdata = training))
dummies <- dummyVar(wage ~ jobclass, data= training)
dummies <- dummyVars(wage ~ jobclass, data= training)
head(predict(dummies, newdata = training))
nsv <- nearZeroVar(training, saveMetrics = TRUE)
nsv
library(splines)
bsBasic <- bs(training$wage, df =3)
bsBasic
bsBasic <- bs(training$age, df =3)
bsBasic
lml <- lm(wage ~ bsBasic, data = training)
plot(training$age, training$wage, pch = 19, cex = 0.5)
points(training$age,predict(lml, newdata = training), col = "red", pch = 19, cex = 0.5)
predict(bsBasic, age = testing$age)
library(caret)
library(kernlab)
data("spam")
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8, arr.ind = T)
names(spam)[c(34,32)]
plot(spam[,34], spam[,32])
x <- 0.71*training$num415 + 0.71*training$num875
y <- 0.71*training$num415 - 0.71*training$num875
plot(x,y)
x <- 0.71*training$num415 + 0.71*training$num875
y <- 0.71*training$num415 - 0.71*training$num875
plot(x,y)
x
y
library(caret)
data("faithful")
set.seed(333)
inTrain <- createDataPartition(y = faithful$waiting, p = 0.5, list = FALSE)
trainFaith <- faithful[inTrain,]
testFaith <-  faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$waiting, trainFaith$eruptions, pch = 19,col = "blue", xlab = "Waiting", ylab = "Duration")
lml <- lm(eruption ~ waiting,  data = trainFaith)
summary(lml)
plot(trainFaith$waiting, trainFaith$eruptions, pch = 19,col = "blue", xlab = "Waiting", ylab = "Duration")
lines(trainFaith$waiting,lml$fitted, lwd =3)
lines(trainFaith$waiting,lml$fitted, lwd =3)
coef(lml)[1]+coef(lml)[2]*80
newdata <-data.frame(waiting = 80)
predict(lml,newdata)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
suppressMessages(library(caret))
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(gridExtra))
training <- mutate(training, index=1:nrow(training))
cutIndex <- cut2(training$index, g=10)
breaks <- 10
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$BlastFurnaceSlag, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$Water, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$CoarseAggregate, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$FineAggregate, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$Age, g=breaks))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer, breaks=20)
hist(log(training$Superplasticizer+1), breaks=20)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
suppressMessages(library(dplyr))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
names(new_training)
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
suppressMessages(library(dplyr))
new_testing <- testing[, c(names(testing)[IL_col_idx], "diagnosis")]
names(new_testing)
# compute the model with non_pca predictors
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
# apply the non pca model on the testing set and check the accuracy
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
non_pca_result
pc_training_obj <- preProcess(new_training[, -13], method=c('center', 'scale', 'pca'), thresh=0.8)
pc_training_preds <- predict(pc_training_obj, new_training[, -13])
pc_testing_preds <- predict(pc_training_obj, new_testing[, -13])
# compute the model with pca predictors
pca_model <- train(new_training$diagnosis ~ ., data=pc_training_preds, method="glm")
# apply the PCA model on the testing set
pca_result <- confusionMatrix(new_testing[, 13], predict(pca_model, pc_testing_preds))
pca_result
predName <- names(training)
(ILpredictor <- predName[substr(predName, 1, 2) == "IL"])
ProcPCA <- preProcess(training[, ILpredictor], method = "pca", thresh = .9)
ProcPCA$numComp
data("iris")
library(ggplot2)
names(iris)
table(iris$Species)
qplot(Petal.Width, Sepal.Width, colour = Species, data = tarining)
qplot(Petal.Width, Sepal.Width, colour = Species, data = tarining)
inTrain <- createDataPartition(y = iris$Species, p =0.7, list = FALSE)
library(caret)
inTrain <- createDataPartition(y = iris$Species, p =0.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width, Sepal.Width, colour = Species, data = tarining)
qplot(Petal.Width, Sepal.Width, colour = Species, data = training)
library(caret)
modFit <- train(Species ~.,method = "rpart", data = training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main="Classsification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
library(rattle)
fancyRpart(modFit$finalModel)
install.packages("rattle")
library("rattle", lib.loc="~/R/win-library/3.2")
library(rattle)
fancyRpart(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
library("rpart", lib.loc="C:/Program Files/R/R-3.2.3/library")
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=testing)
library(ElemStatlearn)
install.packages("ElemStatLearn")
library(ElemStatlearn)
library("ElemStatLearn", lib.loc="~/R/win-library/3.2")
library(ElemStatlearn)
library(ElemStatlearn)
library(ElemStatlearn)
library(ElemStatlearn)
install.packages("ElemStatLearn")
library(ElemStatlearn)
library("ElemStatLearn", lib.loc="~/R/win-library/3.2")
library(ElemStatlearn)
library(ElemStatlearn)
library(ElemStatLearn)
data("ozone",pacakage="ElemStatLearn")
library(ElemStatLearn)
data("ozone",pacakage="ElemStatLearn")
data("ozone",pacakage="ElemStatLearn")
data(ozone,pacakage="ElemStatLearn")
data(ozone,pacakage="ElemStatLearn")
data(ozone)
ozone <- ozone[order(ozone$ozone)]
ozone <- ozone[order(ozone$ozone)]
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA,nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace = T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temprature ~ ozone, data = ozone0, span = 0.2)
ll[,i] <- predict(loess0,newdata = data.frame(ozone= 1:155))
}
ll <- matrix(NA,nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace = T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[,i] <- predict(loess0,newdata = data.frame(ozone= 1:155))
}
ll <- matrix(NA,nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace = T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll(),i) <- predict(loess0,newdata = data.frame(ozone= 1:155))
}
ll <- matrix(NA,nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace = T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll(i,) <- predict(loess0,newdata = data.frame(ozone= 1:155))
}
#Bagged loess
ll <- matrix(NA,nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace = T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0,newdata = data.frame(ozone= 1:155))
}
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace = T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0,newdata = data.frame(ozone= 1:155))
}
ll <- matrix(NA,nrow = 10, ncol = 155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1], replace = T)
ozone0 <- ozone[ss,]
ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data = ozone0, span = 0.2)
ll[i,] <- predict(loess0,newdata = data.frame(ozone= 1:155))
}
plot(ozone$ozone, ozone$temperature, pch =19, cex = 0.5)
for(i in 1:10){lines(1:155, ll[i,], col = "grey", lwd =2)}
lines(1:155, apply(ll,2,mean), col = "red", lwd =2)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B =10, bagControl = bagControl(fit = ctreeBag$fit, predict = ctreeBag$pred, aggregate = ctreeBag$aggregate))
install.packages("bag")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "./pml-training.csv")
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "./pml-testing.csv")
setwd("C:\\Users\\Dell\\Documents\\project")
getwd()
trainingOrg = read.csv("pml-training.csv", na.strings=c("", "NA", "NULL"))
data.train =  read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", na.strings=c("", "NA", "NULL"))
testingOrg = read.csv("pml-testing.csv", na.strings=c("", "NA", "NULL"))
dim(trainingOrg)
dim(testingOrg)
training.dena <- trainingOrg[ , colSums(is.na(trainingOrg)) == 0]
dim(training.dena)
library("rpart", lib.loc="C:/Program Files/R/R-3.2.3/library")
install.packages("tree")
library("tree", lib.loc="~/R/win-library/3.2")
install.packages("randomForest")
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
runApp()
runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library("RCurl", lib.loc="~/R/win-library/3.2")
devtools::install_github('rstudio/shinyapps')
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
deployApp()
y
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
setwd("~/sample/project")
setwd("~/sample/project/")
author("Ami")
library(slidify)
author(test)
author('test')
author('test')
author('ami')
slidify('index.Rmd')
library(knitr)
browseURL("indx.html")
browseURL('indx.html')
browseURL('index.html')
publish_github(user, repo)
publish_github(user, repo)
data(swiss)
table(seiss)
table(swiss)
show(swiss)
read.csv("hunger.csv")
data("women")
show(women)
row.names(volcano)
rownames(volcano)
colnames(volcano)
head(volcano)
head(mtcars)
head(sleep)
head(rock)
head(airquality)
summary(rock)
summary(airquality)
head(HairEyeColor)
runApp(ui.R)
shiny::runApp()
runApp()
runApp('Shiny/1')
runApp('Shiny/1')
runApp('Shiny/2')
runApp('Shiny/2')
runApp('Shiny/3')
runApp('Shiny/3')
runApp('Shiny/3')
runApp('Shiny/4')
deployApp(1)
deployApp(~/Shiny/1)
runApp('Shiny/5')
runApp('Shiny/5')
runApp('Shiny/5')
runApp('Shiny/5')
runApp('Shiny/5')
runApp('Shiny/5')
runApp('Shiny/5')
runApp('Shiny/5')
runApp('Shiny/5')
deployApp( )
head(swiss)
runApp('Shiny/cars')
RunApp()
runApp('Shiny/cars')
runApp('Shiny/Swiss')
head(swiss)
runApp('Shiny/Course Project')
runApp('Shiny/Course Project')
runApp('Shiny/cars')
runApp('Shiny/Swiss')
runApp('Shiny/Course Project')
runApp('Shiny/Course Project')
runApp('Shiny/Course Project')
runApp('Shiny/Course Project')
runApp('Shiny/Course Project')
runApp('Shiny/Course Project')
runApp('Shiny/Course Project')
runApp('Shiny/Course Project')
runApp('Shiny/Course Project')
runApp('Shiny/Course Project')
runApp('Shiny/cars')
runApp('Shiny/cars')
runApp('Shiny/cars')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='amikiran', token='D59411FAEA07E710F96ED61858D4C83B', secret='s07mAD2uyJNck9QLmBsYfeBP/8t4+0qbQLkqb0kP')
librar
library(rsconnect)
rsconnect::deployApp('C:\Users\Dell\Documents\Shiny')
rsconnect::deployApp("C:\Users\Dell\Documents\Shiny")
rsconnect::deployApp(C:\Users\Dell\Documents\Shiny)
library(shiny)
runApp()
library(shiny)
runApp()
library(rsconnect)
deployApp()
deployApp()
y
runApp(Shiny/cars)
runApp('Shiny/cars')
deployApp()
runApp('Shiny/cars')
install.packages("devtools")
library(devtool)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(silidfy)
library(slidify)
setwd("~/shiny/cars")
author("Ami")
slidify(index.Rmd)
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
browseURL('index.html')
browseURL('index.html')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
browseURL('index.html')
browseURL('index.html')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
library(knitr)
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
library(knitr)
slidify('index.Rmd')
# Chunk 1
head(mtcars)
# Chunk 1
head(mtcars)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
library(knitr)
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
# Chunk 1
head(mtcars)
head(mtcars)
library(car)
scatterplot.matrix(~mpg+disp+wt, data = mtcars, cex.axis= 1.5)
head(mtcars)
slidify('index.Rmd')
packageurl <- "http://cran.r-project.org/src/contrib/Archive/knitr/knitr_1.12.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
head(mtcars)
library(car)
scatterplot.matrix(~mpg+disp+wt, data = mtcars, cex.axis= 1.5)
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')\
slidify('index.Rmd')\
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
publish_github(user, repo)
publish_github(user, Ami)
publish_github(user= "Amikiran2003", repo = "DDP")
